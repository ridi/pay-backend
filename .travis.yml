dist: trusty

language: php
php:
  - '7.2'

sudo: required

services:
  - docker

addons:
  apt:
    packages:
      - docker-ce

cache:
  directories:
    - $HOME/.composer/cache

stages:
  - test
  - build
  - deploy
  - docs

jobs:
  include:
    - stage: test
      name: test
      if: tag IS NOT present
      install:
        - sudo apt-get install python3-pip && sudo pip3 install awscli
        - $(aws ecr get-login --no-include-email --region ap-northeast-2)
        - composer validate && composer install
      script:
        - make test
      after_success: bash <(curl -s https://codecov.io/bash)
    - stage: build
      name: build
      if: branch IN (test, staging, master)
      install:
        - sudo apt-get install python3-pip && sudo pip3 install awscli
        - $(aws ecr get-login --no-include-email --region ap-northeast-2)
      script:
        - GIT_REVISION=$TRAVIS_COMMIT make build
    - stage: deploy
      name: prod-deploy
      if: tag IS present AND tag =~ /^\d{4}\.\d{2}\.\d{2}\.\d+$/
      install: sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest && sudo chmod +x /usr/local/bin/ecs-cli
      script:
        - |
          APP_ENV=prod \
          GIT_REVISION=$TRAVIS_COMMIT \
          AP_NORTHEAST_2A_PRIVATE_SUBNET_ID=$PROD_AP_NORTHEAST_2A_PRIVATE_SUBNET_ID \
          AP_NORTHEAST_2C_PRIVATE_SUBNET_ID=$PROD_AP_NORTHEAST_2C_PRIVATE_SUBNET_ID \
          SECURITY_GROUP_ID=$PROD_SECURITY_GROUP_ID \
          TARGET_GROUP_ARN=$PROD_TARGET_GROUP_ARN \
          make deploy
      after_success:
        - sh ./bin/slack_notification.sh success
      after_failure:
        - sh ./bin/slack_notification.sh fail
    - stage: deploy
      name: test-deploy
      if: branch = test
      install: sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest && sudo chmod +x /usr/local/bin/ecs-cli
      script:
        - |
          APP_ENV=test \
          GIT_REVISION=$TRAVIS_COMMIT \
          AP_NORTHEAST_2A_PRIVATE_SUBNET_ID=$TEST_AP_NORTHEAST_2A_PRIVATE_SUBNET_ID \
          AP_NORTHEAST_2C_PRIVATE_SUBNET_ID=$TEST_AP_NORTHEAST_2C_PRIVATE_SUBNET_ID \
          SECURITY_GROUP_ID=$TEST_SECURITY_GROUP_ID \
          TARGET_GROUP_ARN=$TEST_TARGET_GROUP_ARN \
          make deploy
    - stage: deploy
      name: staging-deploy
      if: branch = staging
      install: sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest && sudo chmod +x /usr/local/bin/ecs-cli
      script:
        - |
          APP_ENV=staging \
          GIT_REVISION=$TRAVIS_COMMIT \
          AP_NORTHEAST_2A_PRIVATE_SUBNET_ID=$STAGING_AP_NORTHEAST_2A_PRIVATE_SUBNET_ID \
          AP_NORTHEAST_2C_PRIVATE_SUBNET_ID=$STAGING_AP_NORTHEAST_2C_PRIVATE_SUBNET_ID \
          SECURITY_GROUP_ID=$STAGING_SECURITY_GROUP_ID \
          TARGET_GROUP_ARN=$STAGING_TARGET_GROUP_ARN \
          make deploy
    - stage: docs
      name: api
      install:
        - docker run -itd -v $(pwd)/docs/api:/app --name node node:alpine /bin/sh
        - docker exec -it node sh -c "apk --update add git py3-pip && pip3 install awscli && yarn global add redoc-cli styled-components"
        - composer validate && composer install
      script: php $(pwd)/docs/api/api_scanner.php > $(pwd)/docs/api/api.json
      after_success:
        - |
          docker exec -it \
            -w /app \
            -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" \
            -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" \
            node \
            sh -c "redoc-cli bundle -o api.html api.json && aws s3 cp api.html s3://ridi-pay-backend-api-doc/$TRAVIS_BRANCH/api.html"
